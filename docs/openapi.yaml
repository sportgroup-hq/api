openapi: 3.0.3

info:
  title: Sport Groups API
  description: API documentation for BE Sport Group project.
  version: "0.1.0"

servers:
  - url: 'http://sg.yevhenii.live/api/v1'

tags:
  - name: Auth
    description: Authorization
  - name: Group
  #    description: Groups endpoints
  - name: User
#    description: User endpoints

paths:
  /auth/oauth2callback:
    get:
      summary: Multifunctional endpoint for OAuth2
      description: Request with no parameters leading to the Google's consent screen. Then, when `code` param is passed, access/refresh tokens will be returned.
      tags:
        - Auth
      parameters:
        - name: code
          description: "Code is a OAuth2 Grant Code, that should be passed to that endpoint after redirect from Consent Screen back to App"
          required: false
          in: query
      responses:
        '303':
          description: "Redirects to Google OAuth 2 "
        '200':
          description: "Returns access and refresh tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'

  /auth/login:
    post:
      summary: Log in
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'

  /auth/register:
    post:
      summary: Register user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Successfully created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'

  /auth/refresh-token:
    post:
      summary: Refresh token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OauthToken'

  /me:
    get:
      summary: Get current user
      tags:
        - User
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /groups:
    get:
      summary: Get all groups
      tags:
        - Group
      responses:
        '200':
          description: An array of groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsResponse'
    post:
      summary: Create a new group
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        '201':
          description: Successfully created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /groups/{id}:
    get:
      summary: Get a single group by ID
      tags:
        - Group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A single group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      summary: Update a group by ID
      tags:
        - Group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: Successfully updated group
    delete:
      summary: Delete a group by ID
      tags:
        - Group
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted group

  /groups/join:
    post:
      summary: Join a group using a code
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupJoinRequest'
      responses:
        '200':
          description: Successfully joined group

components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sport:
          type: string
        code:
          type: string
        owner:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        editedAt:
          type: string
          format: date-time

    GroupsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Group'

    GroupRequest:
      type: object
      properties:
        name:
          type: string
        sport:
          type: string

    GroupJoinRequest:
      type: object
      properties:
        code:
          type: string

    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
        sport:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatarUrl:
          type: string
        phone:
          type: string
        dateOfBirth:
          type: string
          format: date
        sex:
          $ref: '#/components/schemas/Sex'
        address:
          type: string

    Sex:
      type: string
      enum:
        - MALE
        - FEMALE

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    OauthToken:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
